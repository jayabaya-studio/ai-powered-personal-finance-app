@extends('layouts.app')

@section('content')
    <header class="bg-white dark:bg-gray-800 shadow-sm rounded-lg mb-6">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                {{ __('AI Financial Assistant') }}
            </h2>
        </div>
    </header>

    <div class="max-w-4xl mx-auto">
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
            <div class="p-6 text-gray-900 dark:text-gray-100">
                
                <div id="ai-response-area" class="mb-6 p-4 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 min-h-[100px] prose dark:prose-invert max-w-none">
                    <p class="text-gray-500 dark:text-gray-400">I'm ready to help! Ask me a question about your finances below.</p>
                </div>

                <form id="ai-form" action="{{ route('ai.analyze') }}" method="POST">
                    @csrf
                    <div class="flex flex-col space-y-4">
                        <label for="question" class="sr-only">Your Question</label>
                        <textarea name="question" id="question" rows="3" class="w-full border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm" placeholder="e.g., How was my spending last August?"></textarea>
                        
                        <div class="flex items-center justify-end">
                            <button type="submit" id="submit-button" class="inline-flex items-center justify-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-700 active:bg-indigo-900 focus:outline-none focus:border-indigo-900 focus:ring ring-indigo-300 disabled:opacity-50 transition ease-in-out duration-150">
                                <span id="button-text">Ask Assistant</span>
                                <svg id="button-spinner" class="animate-spin h-5 w-5 text-white ml-2 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </form>

            </div>
        </div>
    </div>
@endsection

@push('scripts')
{{-- Library untuk parsing Markdown ke HTML dengan aman --}}
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('ai-form');
        if (form) {
            const responseArea = document.getElementById('ai-response-area');
            const submitButton = document.getElementById('submit-button');
            const buttonText = document.getElementById('button-text');
            const buttonSpinner = document.getElementById('button-spinner');

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const question = document.getElementById('question').value;
                if (!question.trim()) {
                    responseArea.innerHTML = '<p class="text-red-500">Please enter a question.</p>';
                    return;
                }

                // [FITUR BARU] Tampilkan status loading
                submitButton.disabled = true;
                buttonText.textContent = 'Analyzing...';
                buttonSpinner.classList.remove('hidden');
                responseArea.innerHTML = '<p class="text-gray-500 dark:text-gray-400">Analyzing your data, please wait...</p>';

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                            'Accept': 'application/json',
                        },
                        body: JSON.stringify({ question: question })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        // Gunakan marked.parse untuk mengubah Markdown menjadi HTML
                        // Ini akan merender format seperti bullet points, bold, dll dengan benar
                        // dan juga membersihkan (sanitize) output untuk keamanan.
                        responseArea.innerHTML = marked.parse(data.answer);
                    } else {
                        responseArea.innerHTML = `<p class="text-red-500">${data.error || 'An unexpected error occurred.'}</p>`;
                    }
                } catch (error) {
                    console.error('Error:', error);
                    responseArea.innerHTML = '<p class="text-red-500">An unexpected error occurred. Please check the console and try again.</p>';
                } finally {
                    // [FITUR BARU] Sembunyikan status loading
                    submitButton.disabled = false;
                    buttonText.textContent = 'Ask Assistant';
                    buttonSpinner.classList.add('hidden');
                }
            });
        }
    });
</script>
@endpush
